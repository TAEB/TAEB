* ExtendedCurses UI
 * allow use of screen area in terminals > 80x24 for other info.

* ttyrec recording of bot games (only the raw nethack feed, so it's interchangeable with
  other recorded games)

* ttyrec playback using ScreenScraper and other nifty features of TAEB to allow interactive
  menuing, pause, skip to [turn, interesting event], etc.
  * should also be possible to use when observing players via termcast/NAO view mode...

* Enhanced 'Human' AI module, to implement some of the features of interhack.
  * Macros
    * keystroke expansion (dumb)
    * 'AI Snippets' -- 'explore this dlvl', ...
  * Preventions (should be toggleable/overrideable during play)
    * Conduct ensuring (foodless, weaponless, wishless...)
    * /oC or Bo[HT] in BoH 
    * walking on water/lava without protection
    * rotten food eating

  * Viewable monster/item spoilers via NMS/NIS.
  * External game database for items, automagical renaming of all items following mindflaying, amnesia, etc.
  * Superposition of fixed map levels (minetown, minesend, oracle, castle...)
  * PasteDetection (straight interhack port)
  * Configurable perlish regex/logic plugins for colouring things
  * Intelligent autopickup (for retrieving thrown/fired items)
  * Automatic last-zap wresting
  
  * <ADD MORE HERE>

== ExtendedCurses Interface ==

An alternative UI for TAEB, designed primarily for Human play.  It separates the
display into the following areas:

* Map -- Representation of the current dlvl. Subject to a variety of command modifiers
         similar to how change_draw_mode() works at the moment.

* Message Area -- similar to current NH topl, but potentially larger and with history. Supports
                  scrolling, and switch to full-screen view.

* Status Area  -- configurable status display, replacement for NH botl.  Supports configurable
                  colouring based on regex or numeric comparisons (similar to healthmon colouring)


* Inventory Area -- Permanent inventory area.

* Log Area       -- feeds from a new TAEB logging channel 'ui'.

* Floating (dialog) menus.  Used for configuration and other things that should be modal.

=== Object Model: ===

Curses::Widgets::TAEB <- base class for widgets
C::W::T::Map
C::W::T::MessagePanel
C::W::T::StatusPanel
C::W::T::MenuPanel (extends c:w:list?)
C::W::T::LogPanel (probably some base class with messagepanel)

Curses::Forms::TAEB <- form which assembles all these widgets together following a configurable
                       layout.

=== TAEB Mainloop ===

* bin/taeb: loop:
 * TAEB::play - infinite loop until iterate reports a failure.
  * TAEB::iterate - run a single step of TAEB
    * TAEB::full_input(1)
     * process NH inputs
     * Scraper::clear() - clear out the NH messages parsed by the screenscraper.
     * update dungeon, senses and publisher states.
!    * UI::redraw
!    * UI::display_topline
    * TAEB::human_input (unless AI::Human)
!    * UI::try_key - Nonblocking
     * TAEB::keypress (if key) - various things which manipulate UI state.
!     * may call UI::redraw
!     * may call UI::display_menu
      * TAEB::enqueue_message(key) if not handled.
    * TAEB::handle_$state (playing|logging_in)
     * TAEB::handle_playing
      * AI::next_action
       * human AI; 
!       * UI::keypress(UI::get_key) - Blocking.

=== UI Public Interface ===

notify()
 write TAEB messages to topline
 place cursor
 sleep for a bit (why?)
 redraw()

redraw()
 maybe clear screen
 draw map
 draw status line(s)
 place cursor (at player position?)

display_topline() 
 clear line
 if arguments
  print and return
 else
  get parsed messages from TAEB
  clear line and return if none
  loop over all messages:
   process up to 20 messages
   draw them, colouring green if they're successfully parsed.
   redraw() if any messages left?
 place cursor

get_key() - blocking readkey (getch)
try_key() - nonblocking readkey.  returns undef on error (-1 from getch)

display_menu()



institute() - create the initial display and do all the setup, but no actual drawing.
reinitialize() - should call reset on all the widgets in teh form.
deinitialize() - clean up and restore normal terminal modes.

=== UI Private Interface ===
draw_botl()
place_cursor()


Temp TODO:

* figure out the bare minimum UI hooks (notify, topl, botl...)
* continue using forms?!
  * could just use widgets. We need to decide if things need to be redrawn or not.
  * have an option to each widget which indicates if it's modified?

